{"version":3,"sources":["src/server/compiler/AppCompiler.ts"],"names":[],"mappings":"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","file":"AppCompiler.js","sourcesContent":["import * as path from 'path';\nimport * as vm from 'vm';\n\nimport { App } from '../../definition/App';\nimport { AppMethod } from '../../definition/metadata';\nimport { AppAccessors } from '../accessors';\nimport { AppManager } from '../AppManager';\nimport { MustContainFunctionError, MustExtendAppError } from '../errors';\nimport { AppConsole } from '../logging';\nimport { Utilities } from '../misc/Utilities';\nimport { ProxiedApp } from '../ProxiedApp';\nimport { IAppStorageItem } from '../storage';\nimport { IParseAppPackageResult } from './IParseAppPackageResult';\n\nexport class AppCompiler {\n    public normalizeStorageFiles(files: { [key: string]: string }): { [key: string]: string } {\n        const result: { [key: string]: string } = {};\n\n        Object.entries(files).forEach(([name, content]) => {\n            result[name.replace(/\\$/g, '.')] = content;\n        });\n\n        return result;\n    }\n\n    public toSandBox(manager: AppManager, storage: IAppStorageItem, { files }: IParseAppPackageResult): ProxiedApp {\n        if (typeof files[path.normalize(storage.info.classFile)] === 'undefined') {\n            throw new Error(`Invalid App package for \"${ storage.info.name }\". ` +\n                `Could not find the classFile (${ storage.info.classFile }) file.`);\n        }\n\n        const exports = {};\n        const customRequire = Utilities.buildCustomRequire(files, storage.info.id);\n        const context = Utilities.buildDefaultAppContext({ require: customRequire, exports, process: {}, console });\n\n        const script = new vm.Script(files[path.normalize(storage.info.classFile)]);\n        const result = script.runInContext(context);\n\n        if (typeof result !== 'function') {\n            // tslint:disable-next-line:max-line-length\n            throw new Error(`The App's main class for ${ storage.info.name } is not valid (\"${ storage.info.classFile }\").`);\n        }\n\n        const appAccessors = new AppAccessors(manager, storage.info.id);\n        const logger = new AppConsole(AppMethod._CONSTRUCTOR);\n        const rl = vm.runInNewContext('new App(info, rcLogger, appAccessors);', Utilities.buildDefaultAppContext({\n            rcLogger: logger,\n            info: storage.info,\n            App: result,\n            process: {},\n            appAccessors,\n        }), { timeout: 1000, filename: `App_${ storage.info.nameSlug }.js` });\n\n        if (!(rl instanceof App)) {\n            throw new MustExtendAppError();\n        }\n\n        if (typeof rl.getName !== 'function') {\n            throw new MustContainFunctionError(storage.info.classFile, 'getName');\n        }\n\n        if (typeof rl.getNameSlug !== 'function') {\n            throw new MustContainFunctionError(storage.info.classFile, 'getNameSlug');\n        }\n\n        if (typeof rl.getVersion !== 'function') {\n            throw new MustContainFunctionError(storage.info.classFile, 'getVersion');\n        }\n\n        if (typeof rl.getID !== 'function') {\n            throw new MustContainFunctionError(storage.info.classFile, 'getID');\n        }\n\n        if (typeof rl.getDescription !== 'function') {\n            throw new MustContainFunctionError(storage.info.classFile, 'getDescription');\n        }\n\n        if (typeof rl.getRequiredApiVersion !== 'function') {\n            throw new MustContainFunctionError(storage.info.classFile, 'getRequiredApiVersion');\n        }\n\n        const app = new ProxiedApp(manager, storage, rl as App, customRequire);\n\n        manager.getLogStorage().storeEntries(app.getID(), logger);\n\n        return app;\n    }\n}\n"]}