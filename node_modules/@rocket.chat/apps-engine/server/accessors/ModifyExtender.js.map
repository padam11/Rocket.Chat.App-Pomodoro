{"version":3,"sources":["src/server/accessors/ModifyExtender.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,wDAAuE;AAIvE,uDAAoD;AACpD,iDAA8C;AAE9C,MAAa,cAAc;IACvB,YAA6B,OAAmB,EAAmB,KAAa;QAAnD,YAAO,GAAP,OAAO,CAAY;QAAmB,UAAK,GAAL,KAAK,CAAQ;IAAI,CAAC;IAExE,aAAa,CAAC,SAAiB,EAAE,OAAc;;YACxD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YACnF,GAAG,CAAC,MAAM,GAAG,OAAO,CAAC;YACrB,GAAG,CAAC,QAAQ,GAAG,IAAI,IAAI,EAAE,CAAC;YAE1B,OAAO,IAAI,iCAAe,CAAC,GAAG,CAAC,CAAC;QACpC,CAAC;KAAA;IAEY,UAAU,CAAC,MAAc,EAAE,OAAc;;YAClD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YAC9E,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;YAE5B,OAAO,IAAI,2BAAY,CAAC,IAAI,CAAC,CAAC;QAClC,CAAC;KAAA;IAEM,MAAM,CAAC,QAA0C;QACpD,QAAQ,QAAQ,CAAC,IAAI,EAAE;YACnB,KAAK,qCAA0B,CAAC,OAAO;gBACnC,OAAO,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YACvF,KAAK,qCAA0B,CAAC,IAAI;gBAChC,OAAO,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,QAAQ,CAAC,+BAA+B,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YAC7H;gBACI,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;SACzF;IACL,CAAC;CACJ;AA5BD,wCA4BC","file":"ModifyExtender.js","sourcesContent":["import { IMessageExtender, IModifyExtender, IRoomExtender } from '../../definition/accessors';\nimport { RocketChatAssociationModel } from '../../definition/metadata';\nimport { IUser } from '../../definition/users';\n\nimport { AppBridges } from '../bridges/AppBridges';\nimport { MessageExtender } from './MessageExtender';\nimport { RoomExtender } from './RoomExtender';\n\nexport class ModifyExtender implements IModifyExtender {\n    constructor(private readonly bridges: AppBridges, private readonly appId: string) { }\n\n    public async extendMessage(messageId: string, updater: IUser): Promise<IMessageExtender> {\n        const msg = await this.bridges.getMessageBridge().doGetById(messageId, this.appId);\n        msg.editor = updater;\n        msg.editedAt = new Date();\n\n        return new MessageExtender(msg);\n    }\n\n    public async extendRoom(roomId: string, updater: IUser): Promise<IRoomExtender> {\n        const room = await this.bridges.getRoomBridge().doGetById(roomId, this.appId);\n        room.updatedAt = new Date();\n\n        return new RoomExtender(room);\n    }\n\n    public finish(extender: IMessageExtender | IRoomExtender): Promise<void> {\n        switch (extender.kind) {\n            case RocketChatAssociationModel.MESSAGE:\n                return this.bridges.getMessageBridge().doUpdate(extender.getMessage(), this.appId);\n            case RocketChatAssociationModel.ROOM:\n                return this.bridges.getRoomBridge().doUpdate(extender.getRoom(), extender.getUsernamesOfMembersBeingAdded(), this.appId);\n            default:\n                throw new Error('Invalid extender passed to the ModifyExtender.finish function.');\n        }\n    }\n}\n"]}